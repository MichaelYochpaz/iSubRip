import asyncioimport osimport aiohttpimport m3u8from isubrip.enums import SubtitlesFormatfrom isubrip.subtitles import Subtitlesclass PlaylistDownloader:    """A class for downloading & converting m3u8 playlists into subtitles."""    def __init__(self, user_agent: str = None) -> None:        """        Create a new PlaylistDownloader instance.        Args:            user_agent (str, optional): User agent to use when downloading. Uses default user-agent if not set.        """        self.session = aiohttp.ClientSession()        self.session.headers.update({"user-agent": user_agent})    def __enter__(self):        return self    def __exit__(self, exc_type, exc_val, exc_tb):        self.close()    def download_subtitles(self, playlist_url: str, output_dir: str, file_name: str, file_format: SubtitlesFormat = SubtitlesFormat.VTT) -> str:        """        Download subtitles playlist to a file.        Args:            playlist_url (str): URL of the playlist to download.            output_dir (str): Path to output directory (where the file will be saved).            file_name (str): File name for the downloaded file.            file_format (SubtitlesFormat, optional): File format to use for the downloaded file. Defaults to "SubtitlesFormat.VTT".        Returns:            str: Path to the downloaded subtitles file.        """        file_name += f".{file_format.name.lower()}"        path = os.path.join(output_dir, file_name)        subtitles_obj = Subtitles()        playlist = m3u8.load(playlist_url)        async_loop = asyncio.get_event_loop()        async_tasks = [async_loop.create_task(self.download_segment(segment.absolute_uri)) for segment in playlist.segments]        segments = async_loop.run_until_complete(asyncio.gather(*async_tasks))        for segment in segments:            subtitles_obj.append_subtitles(Subtitles.loads(segment))        with open(path, 'w', encoding="utf-8") as f:            f.write(subtitles_obj.dumps(file_format))        return path    async def download_segment(self, segment_url: str) -> str:        """        Download an m3u8 segment.        Args:            segment_url (str): Segment URL to download.        Returns:            str: Downloaded segment data as a string.        """        data = await self.session.get(segment_url)        content = await data.read()        return content.decode('utf-8')    def close(self) -> None:        """Close aiohttp session."""        async_loop = asyncio.get_event_loop()        close_task = async_loop.create_task(self.session.close())        async_loop.run_until_complete(asyncio.gather(close_task))